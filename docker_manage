#!/usr/bin/bash

# Autor:      aptalca <https://blog.linuxserver.io/2019/10/01/updating-and-backing-up-docker-containers-with-version-control/>
# Autor:      ***REMOVED*** <***REMOVED***>
# Ge√§ndert:   August 2021

# Change variables here:
APPDATA_LOC="/opt/appdata"
COMPOSE_LOC="/root/docker-compose.yml"

# Don't change variables below unless you want to customize the script
VERSIONS_LOC="${APPDATA_LOC}/versions.txt"

function backup {
    if [ ! -f "$VERSIONS_LOC" ];then
        for i in $(docker-compose -f "$COMPOSE_LOC" config --services); do
            container_name=$(docker run --rm -v "$(dirname $COMPOSE_LOC)":/workdir mikefarah/yq:4 e .services."${i}".container_name "$(awk -F/ '{print $NF}' <<< $COMPOSE_LOC)")
            image_name=$(docker inspect --format='{{ index .Config.Image }}' "$container_name")
            repo_digest=$(docker inspect --format='{{ index .RepoDigests 0 }}' "$(docker inspect --format='{{ .Image }}' "$container_name")")
            echo "$container_name,$image_name,$repo_digest" >> "$VERSIONS_LOC"
        done
    else
        mv "$VERSIONS_LOC" "${VERSIONS_LOC}.bak"
        while IFS= read -r line; do
            container_name=$(echo "$line" | awk -F, '{print $1}')
            image_name=$(echo "$line" | awk -F, '{print $2}')
            repo_digest=$(docker inspect --format='{{ index .RepoDigests 0 }}' "$(docker inspect --format='{{ .Image }}' "$container_name")")
            echo "$container_name,$image_name,$repo_digest" >> "$VERSIONS_LOC"
        done < <(cat "${VERSIONS_LOC}.bak")
        rm "${VERSIONS_LOC}.bak"
    fi

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" down

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    APPDATA_NAME=$(echo "$APPDATA_LOC" | awk -F/ '{print $NF}')
    cp -a "$COMPOSE_LOC" "$APPDATA_LOC"/docker-compose.yml.bak
    tar -C "$APPDATA_LOC"/.. -cvzf "$APPDATA_LOC"/../appdatabackup.tar.gz "$APPDATA_NAME"

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" up -d
    chown "${USER}":"${USER}" "$APPDATA_LOC"/../appdatabackup.tar.gz
}

function update {
    if [ ! -f "$VERSIONS_LOC" ];then
        for i in $(docker-compose -f "$COMPOSE_LOC" config --services); do
            container_name=$(docker run --rm -v "$(dirname $COMPOSE_LOC)":/workdir mikefarah/yq:4 e .services."${i}".container_name "$(awk -F/ '{print $NF}' <<< $COMPOSE_LOC)")
            image_name=$(docker inspect --format='{{ index .Config.Image }}' "$container_name")
            repo_digest=$(docker inspect --format='{{ index .RepoDigests 0 }}' "$(docker inspect --format='{{ .Image }}' "$container_name")")
            echo "$container_name,$image_name,$repo_digest" >> "$VERSIONS_LOC"
        done
    else
        mv "$VERSIONS_LOC" "${VERSIONS_LOC}.bak"
        while IFS= read -r line; do
            container_name=$(echo "$line" | awk -F, '{print $1}')
            image_name=$(echo "$line" | awk -F, '{print $2}')
            repo_digest=$(docker inspect --format='{{ index .RepoDigests 0 }}' "$(docker inspect --format='{{ .Image }}' "$container_name")")
            echo "$container_name,$image_name,$repo_digest" >> "$VERSIONS_LOC"
        done < <(cat "${VERSIONS_LOC}.bak")
        rm "${VERSIONS_LOC}.bak"
    fi

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" pull

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" down

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    APPDATA_NAME=$(echo "$APPDATA_LOC" | awk -F/ '{print $NF}')
    cp -a "$COMPOSE_LOC" "$APPDATA_LOC"/docker-compose.yml.bak
    tar -C "$APPDATA_LOC"/.. -cvzf "$APPDATA_LOC"/../appdatabackup.tar.gz "$APPDATA_NAME"

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" up -d
    chown "${USER}":"${USER}" "$APPDATA_LOC"/../appdatabackup.tar.gz

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker image prune -f
}

function restore {
    docker-compose -f "$COMPOSE_LOC" down

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    randstr=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-8}";echo;)
    mv "$APPDATA_LOC" "${APPDATA_LOC}.$randstr"
    cp -a "$COMPOSE_LOC" "${COMPOSE_LOC}.$randstr"
    mkdir -p "$APPDATA_LOC"
    tar xvf "$APPDATA_LOC"/../appdatabackup.tar.gz -C "$APPDATA_LOC"/../
    while IFS= read -r line; do
        image_name=$(echo "$line" | awk -F, '{print $2}')
        repo_digest=$(echo "$line" | awk -F, '{print $3}')
        sed -i "s#image: ${image_name}#image: ${repo_digest}#g" "$COMPOSE_LOC"
    done < <(cat "$VERSIONS_LOC")

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" pull

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" up -d
}

function resume {
    while IFS= read -r line; do
        image_name="$(echo "$line" | awk -F, '{print $2}')"
        repo_digest="$(echo "$line" | awk -F, '{print $3}')"
        sed -i "s#image: ${repo_digest}#image: ${image_name}#g" "$COMPOSE_LOC"
    done < <(cat "$VERSIONS_LOC")

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" pull

    read -r -p "Weiter mit Enter oder Abbruch mit STRG+C..."
    docker-compose -f "$COMPOSE_LOC" up -d
}

# Check if the function exists
if declare -f "$1" > /dev/null; then
  "$@"
else
  echo "The only valid arguments are backup, update, restore, and resume"
  exit 1
fi
