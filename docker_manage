#!/usr/bin/bash

# Needed for echo to correctly work with color codes
set +o histexpand

####################################################################################################
### Settings #######################################################################################
####################################################################################################

# The location you want to store the backups (absolute, without trailing "/")
BACKUP_LOCATION="/opt/backups"

# The number of previous backups to keep
BACKUP_KEEP=5

####################################################################################################
### Variables ######################################################################################
####################################################################################################

# Colors
RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m'

# Date
DATE=$(date +%Y%m%d-%H%M%S)

# Variables for where stuff is saved
# Change these only if you know what you are doing!
COMPOSE_FILE_WITH_PATH=${2:-${PWD}/docker-compose.yml}
STACK_FOLDER_WITH_PATH=$(dirname "$COMPOSE_FILE_WITH_PATH")
STACK_FOLDER_NAME=$(basename "$STACK_FOLDER_WITH_PATH")
VERSIONS_FILE_WITH_PATH="${STACK_FOLDER_WITH_PATH}/versions.txt"

####################################################################################################
### Preparation ####################################################################################
####################################################################################################

# Detect Docker Compose command to be used
if docker compose > /dev/null 2>&1; then
  COMPOSE_COMMAND="docker compose"
elif command -v docker-compose > /dev/null 2>&1; then
  if ! [[ $(alias docker-compose 2> /dev/null) ]] ; then
    COMPOSE_COMMAND="docker-compose"
  fi
else
  echo -e "${RED}Cannot find Docker Compose!${NC}"
  exit 1
fi

# Detect gzip command to be used
if command -v pigz > /dev/null 2>&1; then
  ZIP_COMMAND="pigz"
  UNZIP_COMMAND="unpigz"
elif command -v gzip > /dev/null 2>&1; then
  ZIP_COMMAND="gzip"
  UNZIP_COMMAND="gunzip"
else
  echo -e "${RED}Cannot find gzip/pigz!${NC}"
  exit 1
fi

# Look for pv
if ! command -v pv > /dev/null 2>&1; then
  echo -e "${RED}Cannot find pv (progress view)!${NC}"
  exit 1
fi

# Look for Docker Compose file
if [ ! -f "$COMPOSE_FILE_WITH_PATH" ]; then
  echo -e "${RED}Cannot find Docker Compose File!${NC}"
  exit 1
fi

####################################################################################################
### Functions ######################################################################################
####################################################################################################

function printHeader() {
  echo "Using STACK_FOLDER_WITH_PATH:   $STACK_FOLDER_WITH_PATH"
  echo "Using COMPOSE_FILE_WITH_PATH:   $COMPOSE_FILE_WITH_PATH"
  echo "Using VERSIONS_FILE_WITH_PATH:  $VERSIONS_FILE_WITH_PATH"
  echo "Using COMPOSE_COMMAND:          $COMPOSE_COMMAND"
  echo "Using BACKUP_LOCATION:          $BACKUP_LOCATION"
  echo "Using BACKUP_KEEP:              $BACKUP_KEEP"
  echo "Using ZIP_COMMAND:              $ZIP_COMMAND"
  echo "Using UNZIP_COMMAND:            $UNZIP_COMMAND"
  echo "Using DATE:                     $DATE"
  echo -e "${ORANGE}All files and subdirectories in the current directory will be included in the backup!${NC}"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}
function detectContainers() {
  echo "Detecting containers"
  TIMING_START=$(date +%s)
  [ -f "$VERSIONS_FILE_WITH_PATH" ] && mv "$VERSIONS_FILE_WITH_PATH" "${VERSIONS_FILE_WITH_PATH}.bak"
  for i in $($COMPOSE_COMMAND -f "$COMPOSE_FILE_WITH_PATH" config --services); do
      container_name=$($COMPOSE_COMMAND ps --format '{{.Name}}' "$i")
      image_name=$(docker inspect --format='{{ index .Config.Image }}' "$container_name")
      repo_digest=$(docker inspect --format='{{ index .RepoDigests 0 }}' "$(docker inspect --format='{{ .Image }}' "$container_name")")
      echo "$container_name,$image_name,$repo_digest" >> "$VERSIONS_FILE_WITH_PATH"
  done
  [ -f "${VERSIONS_FILE_WITH_PATH}.bak" ] && rm "${VERSIONS_FILE_WITH_PATH}.bak"
  TIMING_STOP=$(date +%s)
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function pullImages() {
  echo "Pulling images"
  TIMING_START=$(date +%s)
  $COMPOSE_COMMAND -f "$COMPOSE_FILE_WITH_PATH" pull
  TIMING_STOP=$(date +%s)
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function stopStack() {
  echo "Stopping stack"
  TIMING_START=$(date +%s)
  DOWNTIME_START=$TIMING_START
  $COMPOSE_COMMAND -f "$COMPOSE_FILE_WITH_PATH" down
  TIMING_STOP=$(date +%s)
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function backupStack() {
  echo "Backing up stack"
  TIMING_START=$(date +%s)
  tar -C "$STACK_FOLDER_WITH_PATH"/.. -cf - "$STACK_FOLDER_NAME" | pv -s "$(du -sb "$STACK_FOLDER_WITH_PATH" | awk '{print $1}')" > "$BACKUP_LOCATION"/"$STACK_FOLDER_NAME"-"$DATE".tar
  TIMING_STOP=$(date +%s)
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function startStack() {
  echo "Starting stack"
  TIMING_START=$(date +%s)
  $COMPOSE_COMMAND -f "$COMPOSE_FILE_WITH_PATH" up -d
  TIMING_STOP=$(date +%s)
  DOWNTIME_STOP=$TIMING_STOP
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  echo "Service Downtime: $((DOWNTIME_STOP-DOWNTIME_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function compressBackup() {
  echo "Compressing backup"
  TIMING_START=$(date +%s)
  pv -s "$(du -sb "$BACKUP_LOCATION"/"$STACK_FOLDER_NAME"-"$DATE".tar | awk '{print $1}')" "$BACKUP_LOCATION"/"$STACK_FOLDER_NAME"-"$DATE".tar | $ZIP_COMMAND > "$BACKUP_LOCATION"/"$STACK_FOLDER_NAME"-"$DATE".tar.gz
  rm "$BACKUP_LOCATION"/"$STACK_FOLDER_NAME"-"$DATE".tar
  TIMING_STOP=$(date +%s)
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function rotateBackups() {
  echo "Deleting old backups"
  TIMING_START=$(date +%s)
  find "$BACKUP_LOCATION"/ -maxdepth 1 -type f -name "$STACK_FOLDER_NAME-*.tar.gz" | sort -r | tail -n +$((BACKUP_KEEP+1)) | xargs -r -n1 rm -v
  TIMING_STOP=$(date +%s)
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function pruneImages() {
  echo "Pruning images"
  echo -e  "${ORANGE}Pruning can't be limited to this stack!${NC}"
  echo -en "${ORANGE}Prune all dangling images? (Y|n)${NC} "
  while true; do
    read -r answer
    case ${answer:-Y} in
      [YyJj]) TIMING_START=$(date +%s); docker image prune -f; break;;
      [Nn])   break;;
      *)      echo "Please use \"y\" or \"n\" to answer!";;
    esac
  done
  TIMING_STOP=$(date +%s)
  echo "Time taken: $((TIMING_STOP-TIMING_START))s"
  read -r -p "Continue with Enter or cancel with CTRL+C..."
}

function backup {
  printHeader
  detectContainers
  stopStack
  backupStack
  startStack
  compressBackup
  rotateBackups
}

function update {
  printHeader
  detectContainers
  pullImages
  stopStack
  backupStack
  startStack
  compressBackup
  rotateBackups
  pruneImages
}

####################################################################################################
### Start ##########################################################################################
####################################################################################################

case "$1" in
  backup) backup;;
  update) update;;
  *) echo "$(basename "$0") backup|update";;
esac

exit 0
